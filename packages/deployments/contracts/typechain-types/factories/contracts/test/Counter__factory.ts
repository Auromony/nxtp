/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Counter,
  CounterInterface,
} from "../../../contracts/test/Counter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "attack",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "executor",
    outputs: [
      {
        internalType: "contract IExecutor",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "increment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "incrementAndSend",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_executor",
        type: "address",
      },
    ],
    name: "setExecutor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "value",
        type: "bool",
      },
    ],
    name: "setShouldRevert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "shouldRevert",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600060015534801561001557600080fd5b506000805460ff19169055610b6a8061002f6000396000f3fe60806040526004361061007b5760003560e01c8063c34c08e51161004e578063c34c08e5146101d6578063d09de08a1461020e578063d2eee78a14610223578063d3072d82146102365761007b565b806306661abd1461013a5780631c3c0ea8146101635780636813d787146101a05780639e5faafc146101ce575b60025467016345785d8a00006001600160a01b03909116311061013857600254604080518082018252601d815262ffffff19602082015290516278a6d160e61b81526001600160a01b0390921691631e29b440916100ee91612b679167016345785d8a00009130916000916004016108f2565b6000604051808303816000875af115801561010d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610135919081019061096f565b50505b005b34801561014657600080fd5b5061015060015481565b6040519081526020015b60405180910390f35b34801561016f57600080fd5b5061013861017e366004610a4e565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b3480156101ac57600080fd5b506101386101bb366004610a69565b6000805460ff1916911515919091179055565b610138610260565b3480156101e257600080fd5b506002546101f6906001600160a01b031681565b6040516001600160a01b03909116815260200161015a565b34801561021a57600080fd5b50610138610316565b610138610231366004610a86565b610387565b34801561024257600080fd5b506000546102509060ff1681565b604051901515815260200161015a565b67016345785d8a000034101561027557600080fd5b600254604080518082018252601d815262ffffff19602082015290516278a6d160e61b81526001600160a01b0390921691631e29b440916102cb91612b679167016345785d8a00009130916000916004016108f2565b6000604051808303816000875af11580156102ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610312919081019061096f565b5050565b60005460ff161561036e5760405162461bcd60e51b815260206004820152601f60248201527f696e6372656d656e743a2073686f756c6452657665727420697320747275650060448201526064015b60405180910390fd5b60018060008282546103809190610ac2565b9091555050565b6001600160a01b0383166103f5578034146103f05760405162461bcd60e51b8152602060048201526024808201527f696e6372656d656e74416e6453656e643a20494e56414c49445f4554485f414d60448201526313d5539560e21b6064820152608401610365565b61044f565b34156104435760405162461bcd60e51b815260206004820152601e60248201527f696e6372656d656e74416e6453656e643a204554485f574954485f45524300006044820152606401610365565b61044f83333084610467565b610457610316565b6104628383836104d8565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526104d29085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526104fc565b50505050565b6001600160a01b038316156104f2576104628383836105ce565b61046282826105fe565b6000610551826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107179092919063ffffffff16565b805190915015610462578080602001905181019061056f9190610ae8565b6104625760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610365565b6040516001600160a01b03831660248201526044810182905261046290849063a9059cbb60e01b9060640161049b565b8047101561064e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610365565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461069b576040519150601f19603f3d011682016040523d82523d6000602084013e6106a0565b606091505b50509050806104625760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610365565b60606107268484600085610730565b90505b9392505050565b6060824710156107915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610365565b6001600160a01b0385163b6107e85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610365565b600080866001600160a01b031685876040516108049190610b05565b60006040518083038185875af1925050503d8060008114610841576040519150601f19603f3d011682016040523d82523d6000602084013e610846565b606091505b5091509150610856828286610861565b979650505050505050565b60608315610870575081610729565b8251156108805782518084602001fd5b8160405162461bcd60e51b81526004016103659190610b21565b60005b838110156108b557818101518382015260200161089d565b838111156104d25750506000910152565b600081518084526108de81602086016020860161089a565b601f01601f19169290920160200192915050565b858152602081018590526001600160a01b0384811660408301528316606082015260c06080820181905260009061092b908301846108c6565b82810360a084015260008152602081019150509695505050505050565b801515811461095657600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561098257600080fd5b825161098d81610948565b602084015190925067ffffffffffffffff808211156109ab57600080fd5b818501915085601f8301126109bf57600080fd5b8151818111156109d1576109d1610959565b604051601f8201601f19908116603f011681019083821181831017156109f9576109f9610959565b81604052828152886020848701011115610a1257600080fd5b610a2383602083016020880161089a565b80955050505050509250929050565b80356001600160a01b0381168114610a4957600080fd5b919050565b600060208284031215610a6057600080fd5b61072982610a32565b600060208284031215610a7b57600080fd5b813561072981610948565b600080600060608486031215610a9b57600080fd5b610aa484610a32565b9250610ab260208501610a32565b9150604084013590509250925092565b60008219821115610ae357634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610afa57600080fd5b815161072981610948565b60008251610b1781846020870161089a565b9190910192915050565b60208152600061072960208301846108c656fea2646970667358221220808b80cde736e09588beca50e741da83b893c48fd927e286becdb576f23d53ae64736f6c634300080b0033";

type CounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Counter__factory extends ContractFactory {
  constructor(...args: CounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Counter> {
    return super.deploy(overrides || {}) as Promise<Counter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  override connect(signer: Signer): Counter__factory {
    return super.connect(signer) as Counter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new utils.Interface(_abi) as CounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}
