/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestStableSwap,
  TestStableSwapInterface,
} from "../../../contracts/test/TestStableSwap";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IStableSwap",
        name: "swapContract",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "lpTokenContract",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "numOfTokens",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "assetA",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "assetB",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "seedA",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "seedB",
        type: "uint256",
      },
    ],
    name: "PoolCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "assetIn",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "assetOut",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    name: "Swapped",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "MAX_INT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lpToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "n",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "assetA",
        type: "address",
      },
      {
        internalType: "address",
        name: "assetB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "seedA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "seedB",
        type: "uint256",
      },
    ],
    name: "setupPool",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "swap",
    outputs: [
      {
        internalType: "contract IStableSwap",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "assetIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "assetOut",
        type: "address",
      },
    ],
    name: "swapExact",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "minToMint",
        type: "uint256",
      },
    ],
    name: "test_addLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "minAmounts",
        type: "uint256[]",
      },
    ],
    name: "test_removeLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "maxBurnAmount",
        type: "uint256",
      },
    ],
    name: "test_removeLiquidityImbalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "minAmount",
        type: "uint256",
      },
    ],
    name: "test_removeLiquidityOneToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndexFrom",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "tokenIndexTo",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "dx",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minDy",
        type: "uint256",
      },
    ],
    name: "test_swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001fc438038062001fc4833981016040819052620000349162000233565b600080546001600160a01b0319166001600160a01b03858116919091178255600180549185166001600160a81b031990921691909117600160a01b60ff8516021790555b60015460ff600160a01b90910481169082161015620001925760005460405162415c3360e91b815260ff831660048201526001600160a01b03909116906382b8660090602401602060405180830381865afa158015620000dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200010291906200028c565b60005460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af115801562000156573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200017c9190620002b3565b50806200018981620002d7565b91505062000078565b5060015460005460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015620001ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002109190620002b3565b5050505062000306565b6001600160a01b03811681146200023057600080fd5b50565b6000806000606084860312156200024957600080fd5b835162000256816200021a565b602085015190935062000269816200021a565b604085015190925060ff811681146200028157600080fd5b809150509250925092565b6000602082840312156200029f57600080fd5b8151620002ac816200021a565b9392505050565b600060208284031215620002c657600080fd5b81518015158114620002ac57600080fd5b600060ff821660ff811415620002fd57634e487b7160e01b600052601160045260246000fd5b60010192915050565b611cae80620003166000396000f3fe60806040526004361061009a5760003560e01c80635fcbd285116100615780635fcbd2851461015f578063747142b7146101975780638119c065146101b7578063c05b3275146101d7578063d5914c45146101ea578063fc21e442146101fd57005b8063098d3228146100a35780631b9a1f3d146100cc5780632e52d606146100ec5780632e9f79d51461011f57806357300a8b1461013f57005b366100a157005b005b3480156100af57600080fd5b506100b960001981565b6040519081526020015b60405180910390f35b3480156100d857600080fd5b506100a16100e736600461177c565b61021d565b3480156100f857600080fd5b5060015461010d90600160a01b900460ff1681565b60405160ff90911681526020016100c3565b34801561012b57600080fd5b506100a161013a36600461180d565b61040a565b34801561014b57600080fd5b506100a161015a36600461177c565b6106e4565b34801561016b57600080fd5b5060015461017f906001600160a01b031681565b6040516001600160a01b0390911681526020016100c3565b3480156101a357600080fd5b506100a16101b23660046118ad565b6108db565b3480156101c357600080fd5b5060005461017f906001600160a01b031681565b6100a16101e5366004611967565b610d3e565b6100b96101f83660046119ad565b610e78565b34801561020957600080fd5b506100a16102183660046119ef565b611094565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028a9190611a1c565b60008054604051634d49e87d60e01b815292935090916001600160a01b0390911690634d49e87d906102c89088908890889060001990600401611a35565b6020604051808303816000875af11580156102e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030b9190611a1c565b6001546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037d9190611a1c565b9050610389818461135e565b82146104025760405162461bcd60e51b815260206004820152603a60248201527f6164644c6971756964697479282927732072657475726e2076616c756520646f60448201527f6573206e6f74206d61746368206d696e74656420616d6f756e7400000000000060648201526084015b60405180910390fd5b505050505050565b6000805460405162415c3360e91b815260ff851660048201526001600160a01b03909116906382b8660090602401602060405180830381865afa158015610455573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104799190611a7e565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156104bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e39190611a1c565b600080546040516301f1d0ab60e51b81526004810188905260ff8716602482015260448101869052600019606482015292935090916001600160a01b0390911690633e3a1560906084016020604051808303816000875af115801561054c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105709190611a1c565b6000805460405162415c3360e91b815260ff8816600482015292935090916001600160a01b03909116906382b8660090602401602060405180830381865afa1580156105c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e49190611a7e565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa15801561062a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064e9190611a1c565b905061065a818461135e565b82146104025760405162461bcd60e51b815260206004820152604d60248201527f72656d6f76654c69717569646974794f6e65546f6b656e28292773207265747560448201527f726e2076616c756520646f6573206e6f74206d6174636820726563656976656460648201526c081d1bdad95b88185b5bdd5b9d609a1b608482015260a4016103f9565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561072d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107519190611a1c565b60008054604051632133766f60e21b815292935090916001600160a01b03909116906384cdd9bc9061078f9088908890889060001990600401611a35565b6020604051808303816000875af11580156107ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d29190611a1c565b6001546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108449190611a1c565b9050610850838261135e565b82146104025760405162461bcd60e51b815260206004820152604e60248201527f72656d6f76654c6971756964697479496d62616c616e6365282927732072657460448201527f75726e2076616c756520646f6573206e6f74206d61746368206275726e65642060648201526d1b1c151bdad95b88185b5bdd5b9d60921b608482015260a4016103f9565b600154600090600160a01b900460ff1667ffffffffffffffff81111561090357610903611842565b60405190808252806020026020018201604052801561092c578160200160208202803683370190505b50600154909150600090600160a01b900460ff1667ffffffffffffffff81111561095857610958611842565b604051908082528060200260200182016040528015610981578160200160208202803683370190505b50905060005b60015460ff600160a01b90910481169082161015610aa95760005460405162415c3360e91b815260ff831660048201526001600160a01b03909116906382b8660090602401602060405180830381865afa1580156109e9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0d9190611a7e565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015610a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a779190611a1c565b838260ff1681518110610a8c57610a8c611a9b565b602090810291909101015280610aa181611ac7565b915050610987565b506000805460405163031cd52b60e41b81526001600160a01b03909116906331cd52b090610ae1908890889060001990600401611ae7565b6000604051808303816000875af1158015610b00573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b289190810190611b3e565b905060005b60015460ff600160a01b909104811690821610156104025760005460405162415c3360e91b815260ff831660048201526001600160a01b03909116906382b8660090602401602060405180830381865afa158015610b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb39190611a7e565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d9190611a1c565b838260ff1681518110610c3257610c32611a9b565b602002602001018181525050818160ff1681518110610c5357610c53611a9b565b6020026020010151610ca6858360ff1681518110610c7357610c73611a9b565b6020026020010151858460ff1681518110610c9057610c90611a9b565b602002602001015161135e90919063ffffffff16565b14610d2c5760405162461bcd60e51b815260206004820152604a60248201527f72656d6f76654c6971756964697479282927732072657475726e2076616c756560448201527f20646f6573206e6f74206d6174636820726563656976656420616d6f756e7473606482015269206f6620746f6b656e7360b01b608482015260a4016103f9565b80610d3681611ac7565b915050610b2d565b6001600160a01b0380851660008181526002602052604080822080549488166001600160a01b031995861681179091558252902080549092168117909155610dbd57813414610db85760405162461bcd60e51b815260206004820152600660248201526521736565644160d01b60448201526064016103f9565b610dc9565b610dc98433308561136a565b6001600160a01b038316610e1457803414610e0f5760405162461bcd60e51b815260206004820152600660248201526510b9b2b2b22160d11b60448201526064016103f9565b610e20565b610e208333308461136a565b604080516001600160a01b03808716825285166020820152908101839052606081018290527fd569a23a8cff45c641c5d5e4fb55b5e15e918f9acf0fc42b4909adc31f5f806c9060800160405180910390a150505050565b6001600160a01b038281166000908152600260205260408120549091838116911614610ecf5760405162461bcd60e51b815260206004820152600660248201526502173657475760d41b60448201526064016103f9565b6001600160a01b038216158015610f1e5784471015610f195760405162461bcd60e51b81526004016103f9906020808252600490820152630858985b60e21b604082015260600190565b610fbf565b6040516370a0823160e01b815230600482015285906001600160a01b038516906370a0823190602401602060405180830381865afa158015610f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f889190611a1c565b1015610fbf5760405162461bcd60e51b81526004016103f9906020808252600490820152630858985b60e21b604082015260600190565b6001600160a01b03841661100a578434146110055760405162461bcd60e51b81526004016103f990602080825260049082015263085d985b60e21b604082015260600190565b611016565b6110168433308861136a565b801561102b5761102633866113db565b611036565b6110368333876114f9565b604080516001600160a01b03808716825285166020820152908101869052606081018690527fa078c4190abe07940190effc1846be0ccf03ad6007bc9e93f9697d0b460befbb9060800160405180910390a1849150505b9392505050565b6000805460405162415c3360e91b815260ff861660048201526001600160a01b03909116906382b8660090602401602060405180830381865afa1580156110df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111039190611a7e565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015611149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116d9190611a1c565b600080546040516348b4aac360e11b815260ff808a16600483015288166024820152604481018790526064810186905242608482015292935090916001600160a01b039091169063916955869060a4016020604051808303816000875af11580156111dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112009190611a1c565b6000805460405162415c3360e91b815260ff8916600482015292935090916001600160a01b03909116906382b8660090602401602060405180830381865afa158015611250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112749190611a7e565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156112ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112de9190611a1c565b90506112ea818461135e565b82146113555760405162461bcd60e51b815260206004820152603460248201527f73776170282927732072657475726e2076616c756520646f6573206e6f74206d604482015273185d18da081c9958d95a5d995908185b5bdd5b9d60621b60648201526084016103f9565b50505050505050565b600061108d8284611bc4565b6040516001600160a01b03808516602483015283166044820152606481018290526113d59085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611529565b50505050565b8047101561142b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016103f9565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611478576040519150601f19603f3d011682016040523d82523d6000602084013e61147d565b606091505b50509050806114f45760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016103f9565b505050565b6040516001600160a01b0383166024820152604481018290526114f490849063a9059cbb60e01b9060640161139e565b600061157e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166115fb9092919063ffffffff16565b8051909150156114f4578080602001905181019061159c9190611bdb565b6114f45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103f9565b606061160a8484600085611612565b949350505050565b6060824710156116735760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103f9565b6001600160a01b0385163b6116ca5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103f9565b600080866001600160a01b031685876040516116e69190611c29565b60006040518083038185875af1925050503d8060008114611723576040519150601f19603f3d011682016040523d82523d6000602084013e611728565b606091505b5091509150611738828286611743565b979650505050505050565b6060831561175257508161108d565b8251156117625782518084602001fd5b8160405162461bcd60e51b81526004016103f99190611c45565b60008060006040848603121561179157600080fd5b833567ffffffffffffffff808211156117a957600080fd5b818601915086601f8301126117bd57600080fd5b8135818111156117cc57600080fd5b8760208260051b85010111156117e157600080fd5b6020928301989097509590910135949350505050565b803560ff8116811461180857600080fd5b919050565b60008060006060848603121561182257600080fd5b83359250611832602085016117f7565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561188157611881611842565b604052919050565b600067ffffffffffffffff8211156118a3576118a3611842565b5060051b60200190565b600080604083850312156118c057600080fd5b8235915060208084013567ffffffffffffffff8111156118df57600080fd5b8401601f810186136118f057600080fd5b80356119036118fe82611889565b611858565b81815260059190911b8201830190838101908883111561192257600080fd5b928401925b8284101561194057833582529284019290840190611927565b80955050505050509250929050565b6001600160a01b038116811461196457600080fd5b50565b6000806000806080858703121561197d57600080fd5b84356119888161194f565b935060208501356119988161194f565b93969395505050506040820135916060013590565b6000806000606084860312156119c257600080fd5b8335925060208401356119d48161194f565b915060408401356119e48161194f565b809150509250925092565b60008060008060808587031215611a0557600080fd5b611a0e856117f7565b9350611998602086016117f7565b600060208284031215611a2e57600080fd5b5051919050565b6060808252810184905260006001600160fb1b03851115611a5557600080fd5b8460051b8087608085013760009083016080019081526020830194909452506040015292915050565b600060208284031215611a9057600080fd5b815161108d8161194f565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff811415611ade57611ade611ab1565b60010192915050565b6000606082018583526020606081850152818651808452608086019150828801935060005b81811015611b2857845183529383019391830191600101611b0c565b5050809350505050826040830152949350505050565b60006020808385031215611b5157600080fd5b825167ffffffffffffffff811115611b6857600080fd5b8301601f81018513611b7957600080fd5b8051611b876118fe82611889565b81815260059190911b82018301908381019087831115611ba657600080fd5b928401925b8284101561173857835182529284019290840190611bab565b600082821015611bd657611bd6611ab1565b500390565b600060208284031215611bed57600080fd5b8151801515811461108d57600080fd5b60005b83811015611c18578181015183820152602001611c00565b838111156113d55750506000910152565b60008251611c3b818460208701611bfd565b9190910192915050565b6020815260008251806020840152611c64816040850160208701611bfd565b601f01601f1916919091016040019291505056fea264697066735822122031e2d8e588e5e2452a3aede0cbaca707e14614d67fd10c4c17832b6a8133334b64736f6c634300080b0033";

type TestStableSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestStableSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestStableSwap__factory extends ContractFactory {
  constructor(...args: TestStableSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    swapContract: string,
    lpTokenContract: string,
    numOfTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestStableSwap> {
    return super.deploy(
      swapContract,
      lpTokenContract,
      numOfTokens,
      overrides || {}
    ) as Promise<TestStableSwap>;
  }
  override getDeployTransaction(
    swapContract: string,
    lpTokenContract: string,
    numOfTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      swapContract,
      lpTokenContract,
      numOfTokens,
      overrides || {}
    );
  }
  override attach(address: string): TestStableSwap {
    return super.attach(address) as TestStableSwap;
  }
  override connect(signer: Signer): TestStableSwap__factory {
    return super.connect(signer) as TestStableSwap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestStableSwapInterface {
    return new utils.Interface(_abi) as TestStableSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestStableSwap {
    return new Contract(address, _abi, signerOrProvider) as TestStableSwap;
  }
}
