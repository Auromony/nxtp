/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MulticallInterface extends ethers.utils.Interface {
  functions: {
    "aggregateFulfill(tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "aggregateFulfill",
    values: [
      { target: string; fulfillData: BytesLike; callType: BigNumberish }[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "aggregateFulfill",
    data: BytesLike
  ): Result;

  events: {};
}

export class Multicall extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MulticallInterface;

  functions: {
    aggregateFulfill(
      calls: {
        target: string;
        fulfillData: BytesLike;
        callType: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  aggregateFulfill(
    calls: { target: string; fulfillData: BytesLike; callType: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    aggregateFulfill(
      calls: {
        target: string;
        fulfillData: BytesLike;
        callType: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        ([
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: string;
          transactionId: string;
          sendingChainId: BigNumber;
          receivingChainId: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          preparedBlockNumber: BigNumber;
        })[]
      ] & {
        blockNumber: BigNumber;
        returnData: ([
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: string;
          transactionId: string;
          sendingChainId: BigNumber;
          receivingChainId: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          preparedBlockNumber: BigNumber;
        })[];
      }
    >;
  };

  filters: {};

  estimateGas: {
    aggregateFulfill(
      calls: {
        target: string;
        fulfillData: BytesLike;
        callType: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aggregateFulfill(
      calls: {
        target: string;
        fulfillData: BytesLike;
        callType: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
