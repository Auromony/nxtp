/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Multicall, MulticallInterface } from "../Multicall";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address payable",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "fulfillData",
            type: "bytes",
          },
          {
            internalType: "enum Multicall.CallType",
            name: "callType",
            type: "uint8",
          },
        ],
        internalType: "struct Multicall.FulfillCall[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregateFulfill",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "receivingChainTxManagerAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
          {
            internalType: "address",
            name: "router",
            type: "address",
          },
          {
            internalType: "address",
            name: "initiator",
            type: "address",
          },
          {
            internalType: "address",
            name: "sendingAssetId",
            type: "address",
          },
          {
            internalType: "address",
            name: "receivingAssetId",
            type: "address",
          },
          {
            internalType: "address",
            name: "sendingChainFallback",
            type: "address",
          },
          {
            internalType: "address",
            name: "receivingAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "callTo",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "callDataHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "transactionId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "sendingChainId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "receivingChainId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preparedBlockNumber",
            type: "uint256",
          },
        ],
        internalType: "struct ITransactionManager.TransactionData[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610cbb806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cb91b03114610030575b600080fd5b61004361003e3660046106d8565b61005a565b604051610051929190610abc565b60405180910390f35b8051439060609067ffffffffffffffff81111561008757634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561013657816020015b604080516102008101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820181905261018082018190526101a082018190526101c082018190526101e082015282526000199092019101816100a55790505b50905060005b835181101561040457600084828151811061016757634e487b7160e01b600052603260045260246000fd5b602002602001015160400151600181111561019257634e487b7160e01b600052602160045260246000fd5b14156102d25760008482815181106101ba57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518060200190518101906101d991906107cd565b905060008583815181106101fd57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b0316636e2054a983600001518460200151856040015186606001516040518563ffffffff1660e01b815260040161024a9493929190610a76565b61020060405180830381600087803b15801561026557600080fd5b505af1158015610279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029d9190610876565b9050808484815181106102c057634e487b7160e01b600052603260045260246000fd5b602002602001018190525050506103f2565b60008482815181106102f457634e487b7160e01b600052603260045260246000fd5b602002602001015160200151806020019051810190610313919061079a565b9050600085838151811061033757634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b0316639b151a80836040518263ffffffff1660e01b815260040161036e9190610a63565b61020060405180830381600087803b15801561038957600080fd5b505af115801561039d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c19190610876565b9050808484815181106103e457634e487b7160e01b600052603260045260246000fd5b602002602001018190525050505b806103fc81610c30565b91505061013c565b50915091565b805161041581610c6d565b919050565b600082601f83011261042a578081fd5b815161043d61043882610bd8565b610ba7565b818152846020838601011115610451578283fd5b610462826020830160208701610c00565b949350505050565b80356002811061041557600080fd5b6000610280828403121561048b578081fd5b610493610b14565b905061049f83836105d3565b8152610200820151602082015261022082015167ffffffffffffffff808211156104c857600080fd5b6104d48583860161041a565b60408401526102408401519150808211156104ee57600080fd5b6104fa8583860161041a565b606084015261026084015191508082111561051457600080fd5b506105218482850161041a565b60808301525092915050565b60006060828403121561053e578081fd5b610546610b3d565b9050813561055381610c6d565b815260208281013567ffffffffffffffff81111561057057600080fd5b8301601f8101851361058157600080fd5b803561058f61043882610bd8565b81815286848385010111156105a357600080fd5b818484018583013760008483830101528084860152505050506105c86040830161046a565b604082015292915050565b600061020082840312156105e5578081fd5b6105ed610b60565b90506105f88261040a565b81526106066020830161040a565b60208201526106176040830161040a565b60408201526106286060830161040a565b60608201526106396080830161040a565b608082015261064a60a0830161040a565b60a082015261065b60c0830161040a565b60c082015261066c60e0830161040a565b60e082015261010061067f81840161040a565b9082015261012082810151908201526101408083015190820152610160808301519082015261018080830151908201526101a080830151908201526101c080830151908201526101e09182015191810191909152919050565b600060208083850312156106ea578182fd5b823567ffffffffffffffff80821115610701578384fd5b818501915085601f830112610714578384fd5b81358181111561072657610726610c57565b8060051b610735858201610ba7565b8281528581019085870183870188018b101561074f578889fd5b8893505b8484101561078c5780358681111561076957898afd5b6107778c8a838b010161052d565b84525060019390930192918701918701610753565b509998505050505050505050565b6000602082840312156107ab578081fd5b815167ffffffffffffffff8111156107c1578182fd5b61046284828501610479565b6000602082840312156107de578081fd5b815167ffffffffffffffff808211156107f5578283fd5b9083019060808286031215610808578283fd5b610810610b84565b82518281111561081e578485fd5b61082a87828601610479565b825250602083015161083b81610c6d565b60208201526040838101519082015260608301518281111561085b578485fd5b6108678782860161041a565b60608301525095945050505050565b60006102008284031215610888578081fd5b61089283836105d3565b9392505050565b600081518084526108b1816020860160208601610c00565b601f01601f19169290920160200192915050565b60006102806108d5848451610937565b60208301516102008501526040830151816102208601526108f882860182610899565b91505060608301518482036102408601526109138282610899565b915050608083015184820361026086015261092e8282610899565b95945050505050565b80516001600160a01b03168252602081015161095e60208401826001600160a01b03169052565b50604081015161097960408401826001600160a01b03169052565b50606081015161099460608401826001600160a01b03169052565b5060808101516109af60808401826001600160a01b03169052565b5060a08101516109ca60a08401826001600160a01b03169052565b5060c08101516109e560c08401826001600160a01b03169052565b5060e0810151610a0060e08401826001600160a01b03169052565b50610100818101516001600160a01b03169083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c080820151908301526101e090810151910152565b60208152600061089260208301846108c5565b608081526000610a8960808301876108c5565b6001600160a01b0386166020840152604083018590528281036060840152610ab18185610899565b979650505050505050565b60006040820184835260206040818501528185518084526060860191508287019350845b81811015610b0757610af3838651610937565b938301936102009290920191600101610ae0565b5090979650505050505050565b60405160a0810167ffffffffffffffff81118282101715610b3757610b37610c57565b60405290565b6040516060810167ffffffffffffffff81118282101715610b3757610b37610c57565b604051610200810167ffffffffffffffff81118282101715610b3757610b37610c57565b6040516080810167ffffffffffffffff81118282101715610b3757610b37610c57565b604051601f8201601f1916810167ffffffffffffffff81118282101715610bd057610bd0610c57565b604052919050565b600067ffffffffffffffff821115610bf257610bf2610c57565b50601f01601f191660200190565b60005b83811015610c1b578181015183820152602001610c03565b83811115610c2a576000848401525b50505050565b6000600019821415610c5057634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610c8257600080fd5b5056fea2646970667358221220b64bd9b3297e72ac132c6df3e8700ce88e2710103c19a2e656c05bb4a3ce49d164736f6c63430008040033";

export class Multicall__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Multicall> {
    return super.deploy(overrides || {}) as Promise<Multicall>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Multicall {
    return super.attach(address) as Multicall;
  }
  connect(signer: Signer): Multicall__factory {
    return super.connect(signer) as Multicall__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallInterface {
    return new utils.Interface(_abi) as MulticallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall {
    return new Contract(address, _abi, signerOrProvider) as Multicall;
  }
}
